# Autogenerated by SmartBody
# -------------------- lights
print "Save Lights"

# ---- light: light3
obj = scene.getPawn("light3")
if obj == None:
	obj = scene.createPawn("light3")
obj.setPosition(SrVec(89.54, 5.97, -3.97))
obj.setOrientation(SrQuat(-0.382683, 0.92388, 8.00039e-017, 8.00039e-017))
if obj.getAttribute("blendTexturesWithLighting") != None :
	obj.setBoolAttribute("blendTexturesWithLighting",True)
else:
	attr = obj.createBoolAttribute("blendTexturesWithLighting", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("collisionShape") != None :
	obj.setStringAttribute("collisionShape","null")
else:
	attr = obj.createStringAttribute("collisionShape",  "null", True, "Physics", 350, False, False, False, "Initializes the pawn as a physics object.")
	attr.setDefaultValue("null")
	attr.setValue("null")
	validValues = StringVec()
	validValues.append("null")
	validValues.append("sphere")
	validValues.append("box")
	validValues.append("capsule")
	attr.setValidValues(validValues)
if obj.getAttribute("collisionShapeScale") != None :
	obj.setVec3Attribute("collisionShapeScale",1, 1, 1)
else:
	attr = obj.createVec3Attribute("collisionShapeScale",  1, 1, 1, True, "Physics", 360, False, False, False, "Scaling of physics-based shape.")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 1)
	vec.setData(2, 1)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 1, 1)
	attr.setValue(vec1)
if obj.getAttribute("color") != None :
	obj.setVec3Attribute("color",1, 0, 0)
else:
	attr = obj.createVec3Attribute("color",  1, 0, 0, True, "Display", 6, False, False, False, "Object color.")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("createPhysics") == None :
	attr = obj.createActionAttribute("createPhysics",  True, "Physics", 300, False, False, False, "Initializes the pawn as a physics object.")
if obj.getAttribute("enablePhysics") != None :
	obj.setBoolAttribute("enablePhysics",False)
else:
	attr = obj.createBoolAttribute("enablePhysics", False, True, "Physics", 310, False, False, False, "Enables or disables physics for this pawn.")
	attr.setDefaultValue(False)
	attr.setValue(False)
if obj.getAttribute("enabled") != None :
	obj.setBoolAttribute("enabled",True)
else:
	attr = obj.createBoolAttribute("enabled", True, True, "LightParameters", 200, False, False, False, "Is the light enabled?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightAmbientColor") != None :
	obj.setVec3Attribute("lightAmbientColor",0, 0, 0)
else:
	attr = obj.createVec3Attribute("lightAmbientColor",  0, 0, 0, True, "LightParameters", 220, False, False, False, " Ambient light color")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("lightCastShadow") != None :
	obj.setBoolAttribute("lightCastShadow",True)
else:
	attr = obj.createBoolAttribute("lightCastShadow", True, True, "LightParameters", 300, False, False, False, "Does the light cast shadow?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightConstantAttenuation") != None :
	obj.setDoubleAttribute("lightConstantAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightConstantAttenuation", 1, True, "LightParameters", 270, False, False, False, "Constant attenuation")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightDiffuseColor") != None :
	obj.setVec3Attribute("lightDiffuseColor",1, 0.95, 0.8)
else:
	attr = obj.createVec3Attribute("lightDiffuseColor",  1, 0.95, 0.8, True, "LightParameters", 210, False, False, False, " Diffuse light color")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 0.95)
	vec.setData(2, 0.8)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 0.95, 0.8)
	attr.setValue(vec1)
if obj.getAttribute("lightIsDirectional") != None :
	obj.setBoolAttribute("lightIsDirectional",True)
else:
	attr = obj.createBoolAttribute("lightIsDirectional", True, True, "LightParameters", 205, False, False, False, "Is the light directional?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightLinearAttenuation") != None :
	obj.setDoubleAttribute("lightLinearAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightLinearAttenuation", 1, True, "LightParameters", 280, False, False, False, " Linear attenuation.")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightQuadraticAttenuation") != None :
	obj.setDoubleAttribute("lightQuadraticAttenuation",0)
else:
	attr = obj.createDoubleAttribute("lightQuadraticAttenuation", 0, True, "LightParameters", 290, False, False, False, "Quadratic attenuation")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("lightShadowMapSize") != None :
	obj.setIntAttribute("lightShadowMapSize",1024)
else:
	attr = obj.createIntAttribute("lightShadowMapSize", 1024, True, "LightParameters", 310, False, False, False, "Size of the shadow map")
	attr.setDefaultValue(1024)
	attr.setValue(1024)
if obj.getAttribute("lightSpecularColor") != None :
	obj.setVec3Attribute("lightSpecularColor",0, 0, 0)
else:
	attr = obj.createVec3Attribute("lightSpecularColor",  0, 0, 0, True, "LightParameters", 230, False, False, False, "Specular light color")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("lightSpotCutoff") != None :
	obj.setDoubleAttribute("lightSpotCutoff",180)
else:
	attr = obj.createDoubleAttribute("lightSpotCutoff", 180, True, "LightParameters", 260, False, False, False, "Spotlight cutoff angle")
	attr.setDefaultValue(180)
	attr.setValue(180)
if obj.getAttribute("lightSpotDirection") != None :
	obj.setVec3Attribute("lightSpotDirection",0, 0, -1)
else:
	attr = obj.createVec3Attribute("lightSpotDirection",  0, 0, -1, True, "LightParameters", 250, False, False, False, "Spotlight direction")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, -1)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, -1)
	attr.setValue(vec1)
if obj.getAttribute("lightSpotExponent") != None :
	obj.setDoubleAttribute("lightSpotExponent",0)
else:
	attr = obj.createDoubleAttribute("lightSpotExponent", 0, True, "LightParameters", 240, False, False, False, " Spotlight exponent.")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("mesh") != None :
	obj.setStringAttribute("mesh","")
else:
	attr = obj.createStringAttribute("mesh",  "", True, "Display", 400, False, False, False, "Geometry/mesh")
	attr.setDefaultValue("")
	attr.setValue("")
	validValues = StringVec()
	attr.setValidValues(validValues)
if obj.getAttribute("meshPivot") != None :
	obj.setVec3Attribute("meshPivot",0, 0, 0)
else:
	attr = obj.createVec3Attribute("meshPivot",  0, 0, 0, True, "Display", 440, False, False, False, "Mesh pivot offset")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("meshRotation") != None :
	obj.setVec3Attribute("meshRotation",0, 0, 0)
else:
	attr = obj.createVec3Attribute("meshRotation",  0, 0, 0, True, "Display", 430, False, False, False, "Mesh rotation offset")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("meshScale") != None :
	obj.setVec3Attribute("meshScale",1, 1, 1)
else:
	attr = obj.createVec3Attribute("meshScale",  1, 1, 1, True, "Display", 410, False, False, False, "Scale of geometry/mesh")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 1)
	vec.setData(2, 1)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 1, 1)
	attr.setValue(vec1)
if obj.getAttribute("meshTranslation") != None :
	obj.setVec3Attribute("meshTranslation",0, 0, 0)
else:
	attr = obj.createVec3Attribute("meshTranslation",  0, 0, 0, True, "Display", 420, False, False, False, "Mesh translation offset")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("posX") != None :
	obj.setDoubleAttribute("posX",89.54)
else:
	attr = obj.createDoubleAttribute("posX", 89.54, True, "transform", 10, False, False, False, "X position")
	attr.setDefaultValue(0)
	attr.setValue(89.54)
if obj.getAttribute("posY") != None :
	obj.setDoubleAttribute("posY",5.97)
else:
	attr = obj.createDoubleAttribute("posY", 5.97, True, "transform", 20, False, False, False, "Y position")
	attr.setDefaultValue(0)
	attr.setValue(5.97)
if obj.getAttribute("posZ") != None :
	obj.setDoubleAttribute("posZ",-3.97)
else:
	attr = obj.createDoubleAttribute("posZ", -3.97, True, "transform", 30, False, False, False, "Z position")
	attr.setDefaultValue(0)
	attr.setValue(-3.97)
if obj.getAttribute("rotX") != None :
	obj.setDoubleAttribute("rotX",-45)
else:
	attr = obj.createDoubleAttribute("rotX", -45, True, "transform", 40, False, False, False, "X rotation")
	attr.setDefaultValue(0)
	attr.setValue(-45)
if obj.getAttribute("rotY") != None :
	obj.setDoubleAttribute("rotY",180)
else:
	attr = obj.createDoubleAttribute("rotY", 180, True, "transform", 50, False, False, False, "Y rotation")
	attr.setDefaultValue(0)
	attr.setValue(180)
if obj.getAttribute("rotZ") != None :
	obj.setDoubleAttribute("rotZ",180)
else:
	attr = obj.createDoubleAttribute("rotZ", 180, True, "transform", 60, False, False, False, "Z rotation")
	attr.setDefaultValue(0)
	attr.setValue(180)
if obj.getAttribute("showCollisionShape") != None :
	obj.setBoolAttribute("showCollisionShape",True)
else:
	attr = obj.createBoolAttribute("showCollisionShape", True, True, "Physics", 370, False, False, False, "Whether the collision shape is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("showStaticMesh") != None :
	obj.setBoolAttribute("showStaticMesh",True)
else:
	attr = obj.createBoolAttribute("showStaticMesh", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("visible") != None :
	obj.setBoolAttribute("visible",False)
else:
	attr = obj.createBoolAttribute("visible", False, True, "Display", 5, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(False)

# ---- light: light4
obj = scene.getPawn("light4")
if obj == None:
	obj = scene.createPawn("light4")
obj.setPosition(SrVec(41.3621, 1.5, -36.8061))
obj.setOrientation(SrQuat(0.642788, -2.72742e-012, -2.28858e-012, 0.766044))
if obj.getAttribute("blendTexturesWithLighting") != None :
	obj.setBoolAttribute("blendTexturesWithLighting",True)
else:
	attr = obj.createBoolAttribute("blendTexturesWithLighting", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("collisionShape") != None :
	obj.setStringAttribute("collisionShape","null")
else:
	attr = obj.createStringAttribute("collisionShape",  "null", True, "Physics", 350, False, False, False, "Initializes the pawn as a physics object.")
	attr.setDefaultValue("null")
	attr.setValue("null")
	validValues = StringVec()
	validValues.append("null")
	validValues.append("sphere")
	validValues.append("box")
	validValues.append("capsule")
	attr.setValidValues(validValues)
if obj.getAttribute("collisionShapeScale") != None :
	obj.setVec3Attribute("collisionShapeScale",1, 1, 1)
else:
	attr = obj.createVec3Attribute("collisionShapeScale",  1, 1, 1, True, "Physics", 360, False, False, False, "Scaling of physics-based shape.")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 1)
	vec.setData(2, 1)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 1, 1)
	attr.setValue(vec1)
if obj.getAttribute("color") != None :
	obj.setVec3Attribute("color",1, 0, 0)
else:
	attr = obj.createVec3Attribute("color",  1, 0, 0, True, "Display", 6, False, False, False, "Object color.")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("createPhysics") == None :
	attr = obj.createActionAttribute("createPhysics",  True, "Physics", 300, False, False, False, "Initializes the pawn as a physics object.")
if obj.getAttribute("enablePhysics") != None :
	obj.setBoolAttribute("enablePhysics",False)
else:
	attr = obj.createBoolAttribute("enablePhysics", False, True, "Physics", 310, False, False, False, "Enables or disables physics for this pawn.")
	attr.setDefaultValue(False)
	attr.setValue(False)
if obj.getAttribute("enabled") != None :
	obj.setBoolAttribute("enabled",True)
else:
	attr = obj.createBoolAttribute("enabled", True, True, "LightParameters", 200, False, False, False, "Is the light enabled?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightAmbientColor") != None :
	obj.setVec3Attribute("lightAmbientColor",0, 0, 0)
else:
	attr = obj.createVec3Attribute("lightAmbientColor",  0, 0, 0, True, "LightParameters", 220, False, False, False, " Ambient light color")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("lightCastShadow") != None :
	obj.setBoolAttribute("lightCastShadow",True)
else:
	attr = obj.createBoolAttribute("lightCastShadow", True, True, "LightParameters", 300, False, False, False, "Does the light cast shadow?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightConstantAttenuation") != None :
	obj.setDoubleAttribute("lightConstantAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightConstantAttenuation", 1, True, "LightParameters", 270, False, False, False, "Constant attenuation")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightDiffuseColor") != None :
	obj.setVec3Attribute("lightDiffuseColor",1, 0.95, 0.8)
else:
	attr = obj.createVec3Attribute("lightDiffuseColor",  1, 0.95, 0.8, True, "LightParameters", 210, False, False, False, " Diffuse light color")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 0.95)
	vec.setData(2, 0.8)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 0.95, 0.8)
	attr.setValue(vec1)
if obj.getAttribute("lightIsDirectional") != None :
	obj.setBoolAttribute("lightIsDirectional",True)
else:
	attr = obj.createBoolAttribute("lightIsDirectional", True, True, "LightParameters", 205, False, False, False, "Is the light directional?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightLinearAttenuation") != None :
	obj.setDoubleAttribute("lightLinearAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightLinearAttenuation", 1, True, "LightParameters", 280, False, False, False, " Linear attenuation.")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightQuadraticAttenuation") != None :
	obj.setDoubleAttribute("lightQuadraticAttenuation",0)
else:
	attr = obj.createDoubleAttribute("lightQuadraticAttenuation", 0, True, "LightParameters", 290, False, False, False, "Quadratic attenuation")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("lightShadowMapSize") != None :
	obj.setIntAttribute("lightShadowMapSize",1024)
else:
	attr = obj.createIntAttribute("lightShadowMapSize", 1024, True, "LightParameters", 310, False, False, False, "Size of the shadow map")
	attr.setDefaultValue(1024)
	attr.setValue(1024)
if obj.getAttribute("lightSpecularColor") != None :
	obj.setVec3Attribute("lightSpecularColor",0, 0, 0)
else:
	attr = obj.createVec3Attribute("lightSpecularColor",  0, 0, 0, True, "LightParameters", 230, False, False, False, "Specular light color")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("lightSpotCutoff") != None :
	obj.setDoubleAttribute("lightSpotCutoff",180)
else:
	attr = obj.createDoubleAttribute("lightSpotCutoff", 180, True, "LightParameters", 260, False, False, False, "Spotlight cutoff angle")
	attr.setDefaultValue(180)
	attr.setValue(180)
if obj.getAttribute("lightSpotDirection") != None :
	obj.setVec3Attribute("lightSpotDirection",0, 0, -1)
else:
	attr = obj.createVec3Attribute("lightSpotDirection",  0, 0, -1, True, "LightParameters", 250, False, False, False, "Spotlight direction")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, -1)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, -1)
	attr.setValue(vec1)
if obj.getAttribute("lightSpotExponent") != None :
	obj.setDoubleAttribute("lightSpotExponent",0)
else:
	attr = obj.createDoubleAttribute("lightSpotExponent", 0, True, "LightParameters", 240, False, False, False, " Spotlight exponent.")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("mesh") != None :
	obj.setStringAttribute("mesh","")
else:
	attr = obj.createStringAttribute("mesh",  "", True, "Display", 400, False, False, False, "Geometry/mesh")
	attr.setDefaultValue("")
	attr.setValue("")
	validValues = StringVec()
	attr.setValidValues(validValues)
if obj.getAttribute("meshPivot") != None :
	obj.setVec3Attribute("meshPivot",0, 0, 0)
else:
	attr = obj.createVec3Attribute("meshPivot",  0, 0, 0, True, "Display", 440, False, False, False, "Mesh pivot offset")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("meshRotation") != None :
	obj.setVec3Attribute("meshRotation",0, 0, 0)
else:
	attr = obj.createVec3Attribute("meshRotation",  0, 0, 0, True, "Display", 430, False, False, False, "Mesh rotation offset")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("meshScale") != None :
	obj.setVec3Attribute("meshScale",1, 1, 1)
else:
	attr = obj.createVec3Attribute("meshScale",  1, 1, 1, True, "Display", 410, False, False, False, "Scale of geometry/mesh")
	vec = SrVec()
	vec.setData(0, 1)
	vec.setData(1, 1)
	vec.setData(2, 1)
	attr.setDefaultValue(vec)
	vec1 = SrVec(1, 1, 1)
	attr.setValue(vec1)
if obj.getAttribute("meshTranslation") != None :
	obj.setVec3Attribute("meshTranslation",0, 0, 0)
else:
	attr = obj.createVec3Attribute("meshTranslation",  0, 0, 0, True, "Display", 420, False, False, False, "Mesh translation offset")
	vec = SrVec()
	vec.setData(0, 0)
	vec.setData(1, 0)
	vec.setData(2, 0)
	attr.setDefaultValue(vec)
	vec1 = SrVec(0, 0, 0)
	attr.setValue(vec1)
if obj.getAttribute("posX") != None :
	obj.setDoubleAttribute("posX",41.3621)
else:
	attr = obj.createDoubleAttribute("posX", 41.3621, True, "transform", 10, False, False, False, "X position")
	attr.setDefaultValue(0)
	attr.setValue(41.3621)
if obj.getAttribute("posY") != None :
	obj.setDoubleAttribute("posY",1.5)
else:
	attr = obj.createDoubleAttribute("posY", 1.5, True, "transform", 20, False, False, False, "Y position")
	attr.setDefaultValue(0)
	attr.setValue(1.5)
if obj.getAttribute("posZ") != None :
	obj.setDoubleAttribute("posZ",-36.8061)
else:
	attr = obj.createDoubleAttribute("posZ", -36.8061, True, "transform", 30, False, False, False, "Z position")
	attr.setDefaultValue(0)
	attr.setValue(-36.8061)
if obj.getAttribute("rotX") != None :
	obj.setDoubleAttribute("rotX",2.22521e-016)
else:
	attr = obj.createDoubleAttribute("rotX", 2.22521e-016, True, "transform", 40, False, False, False, "X rotation")
	attr.setDefaultValue(0)
	attr.setValue(2.22521e-016)
if obj.getAttribute("rotY") != None :
	obj.setDoubleAttribute("rotY",-4.07992e-010)
else:
	attr = obj.createDoubleAttribute("rotY", -4.07992e-010, True, "transform", 50, False, False, False, "Y rotation")
	attr.setDefaultValue(0)
	attr.setValue(-4.07992e-010)
if obj.getAttribute("rotZ") != None :
	obj.setDoubleAttribute("rotZ",100)
else:
	attr = obj.createDoubleAttribute("rotZ", 100, True, "transform", 60, False, False, False, "Z rotation")
	attr.setDefaultValue(0)
	attr.setValue(100)
if obj.getAttribute("showCollisionShape") != None :
	obj.setBoolAttribute("showCollisionShape",True)
else:
	attr = obj.createBoolAttribute("showCollisionShape", True, True, "Physics", 370, False, False, False, "Whether the collision shape is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("showStaticMesh") != None :
	obj.setBoolAttribute("showStaticMesh",True)
else:
	attr = obj.createBoolAttribute("showStaticMesh", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("visible") != None :
	obj.setBoolAttribute("visible",False)
else:
	attr = obj.createBoolAttribute("visible", False, True, "Display", 5, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(False)
